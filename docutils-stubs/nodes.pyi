# Stubs for docutils.nodes (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from docutils import nodes
from docutils.frontend import Values
from docutils.transforms import Transformer, Transform
from docutils.utils import Reporter

from typing import Any, Callable, Dict, Generator, Iterable, Iterator, List, Optional, overload, Tuple, Type, TypeVar

__docformat__: str

N = TypeVar('N', bound="Node")
E = TypeVar('E', bound="Element")

class Node:
    parent: "Element" = ...
    document: "document" = ...
    source: str = ...
    line: int = ...
    def __bool__(self) -> bool: ...
    def asdom(self, dom: Optional[Any] = ...) -> Any: ...
    def pformat(self, indent: str = ..., level: int = ...) -> str: ...
    def copy(self: N) -> N: ...
    def deepcopy(self: N) -> N: ...
    def astext(self): ...
    def setup_child(self, child: "Node") -> None: ...
    def walk(self, visitor: "NodeVisitor") -> bool: ...
    def walkabout(self, visitor: "NodeVisitor") -> bool: ...

    @overload
    def findall(self, condition: Type[N] = ..., include_self: bool = ..., descend: bool = ..., siblings: bool = ..., ascend: bool = ...) -> Generator[N, None, None]: ...
    @overload
    def findall(self, condition: Callable[["Node"], bool] = ..., include_self: bool = ..., descend: bool = ..., siblings: bool = ..., ascend: bool = ...) -> Generator[N, None, None]: ...

    @overload
    def traverse(self, condition: Type[N] = ..., include_self: bool = ..., descend: bool = ..., siblings: bool = ..., ascend: bool = ...) -> List[N]: ...
    @overload  # NOQA: F811
    def traverse(self, condition: Callable[["Node"], bool] = ..., include_self: bool = ..., descend: bool = ..., siblings: bool = ..., ascend: bool = ...) -> List[N]: ...

    @overload
    def next_node(self, condition: Type[N] = ..., include_self: bool = ..., descend: bool = ..., siblings: bool = ..., ascend: bool = ...) -> N: ...
    @overload  # NOQA: F811
    def next_node(self, condition: Optional[Any] = ..., include_self: bool = ..., descend: bool = ..., siblings: bool = ..., ascend: bool = ...) -> "Node": ...

def ensure_str(s: str) -> str: ...

class Text(Node, str):
    tagname: str = ...
    children: Tuple[Node, ...] = ...
    rawsource: str = ...
    def __new__(cls, data: str, rawsource: Optional[str] = ...) -> "Text": ...
    def __init__(self, data: str, rawsource: str = ...) -> None: ...
    def shortrepr(self, maxlen: int = ...) -> str: ...
    def astext(self) -> str: ...
    def copy(self: N) -> N: ...
    def deepcopy(self: N) -> N: ...
    def pformat(self, indent: str = ..., level: int = ...) -> str: ...
    def rstrip(self, chars: Optional[str] = ...) -> str: ...
    def lstrip(self, chars: Optional[str] = ...) -> str: ...

class Element(Node):
    basic_attributes: Tuple[str, ...] = ...
    local_attributes: Tuple[str, ...] = ...
    list_attributes: Tuple[str, ...] = ...
    known_attributes: Tuple[str, ...] = ...
    tagname: str = ...
    child_text_separator: str = ...
    rawsource: str = ...
    children: List[Node] = ...
    attributes: Dict[str, Any] = ...
    def __init__(self, rawsource: str = ..., *children: Node, **attributes: Any) -> None: ...
    def shortrepr(self) -> str: ...
    def __unicode__(self) -> str: ...
    def starttag(self, quoteattr: Optional[Callable[[str], str]] = ...) -> str: ...
    def endtag(self) -> str: ...
    def emptytag(self) -> str: ...
    def __len__(self) -> int: ...

    @overload
    def __getitem__(self, key: str) -> Any: ...
    @overload  # NOQA: F811
    def __getitem__(self, key: int) -> Node: ...
    @overload  # NOQA: F811
    def __getitem__(self, key: slice) -> List[Node]: ...
    @overload
    def __setitem__(self, key: str, item: Any) -> None: ...
    @overload
    def __setitem__(self, key: int, item: Node) -> None: ...
    @overload
    def __setitem__(self, key: slice, item: Iterable[Node]) -> None: ...
    def __delitem__(self, key: Any) -> Any: ...
    def __add__(self, other: List[Node]) -> List[Node]: ...
    def __radd__(self, other: List[Node]) -> List[Node]: ...
    def __iadd__(self: E, other: Any) -> E: ...  # type: ignore
    def astext(self) -> str: ...
    def non_default_attributes(self) -> Dict[str, Any]: ...
    def attlist(self) -> List[Tuple[str, Any]]: ...
    def get(self, key: str, failobj: Optional[Any] = ...) -> Any: ...
    def hasattr(self, attr: str) -> bool: ...
    def delattr(self, attr: str) -> None: ...
    def setdefault(self, key: str, failobj: Optional[Any] = ...) -> Any: ...
    def has_key(self, attr: str) -> bool: ...
    def __contains__(self, attr: str) -> bool: ...
    def get_language_code(self, fallback: str = ...) -> str: ...
    def append(self, item: Node) -> None: ...
    def extend(self, item: Iterable[Node]) -> None: ...
    def insert(self, index: int, item: Any) -> None: ...
    def pop(self, i: int = ...) -> Node: ...
    def remove(self, item: Node) -> None: ...
    def index(self, item: Node) -> int: ...
    def is_not_default(self, key: str) -> int: ...
    def update_basic_atts(self, dict_: Any) -> None: ...
    def append_attr_list(self, attr: str, values: List) -> None: ...
    def coerce_append_attr_list(self, attr: str, value) -> None: ...
    def replace_attr(self, attr: str, value: Any, force: bool = ...) -> None: ...
    def copy_attr_convert(self, attr: str, value: Any, replace: bool = ...) -> None: ...
    def copy_attr_coerce(self, attr: str, value: Any, replace: bool) -> None: ...
    def copy_attr_concatenate(self, attr: str, value: Any, replace: bool) -> None: ...
    def copy_attr_consistent(self, attr: str, value: Any, replace: bool) -> None: ...
    def update_all_atts(self, dict_, update_fun: Callable[[str, Any, bool], None] = ..., replace: bool = ..., and_source: bool = ...) -> None: ...
    def update_all_atts_consistantly(self, dict_: Any, replace: bool = ..., and_source: bool = ...) -> None: ...
    def update_all_atts_concatenating(self, dict_: Any, replace: bool = ..., and_source: bool = ...) -> None: ...
    def update_all_atts_coercion(self, dict_: Any, replace: bool = ..., and_source: bool = ...) -> None: ...
    def update_all_atts_convert(self, dict_: Any, and_source: bool = ...) -> None: ...
    def clear(self) -> None: ...
    def replace(self, old: Node, new: Any) -> None: ...
    def replace_self(self, new: Any) -> None: ...
    def first_child_matching_class(self, childclass: Any, start: int = ..., end: int = ...) -> int: ...
    def first_child_not_matching_class(self, childclass: Any, start: int = ..., end: int = ...) -> int: ...
    def pformat(self, indent: str = ..., level: int = ...) -> str: ...
    def copy(self: N) -> N: ...
    def deepcopy(self: N) -> N: ...
    def set_class(self, name: str) -> None: ...
    referenced: int = ...
    def note_referenced_by(self, name: Optional[str] = ..., id: Optional[str] = ...) -> None: ...
    @classmethod
    def is_not_list_attribute(cls, attr: str) -> bool: ...
    @classmethod
    def is_not_known_attribute(cls, attr: str) -> bool: ...

    # dummy atribute to indicate to mypy that Element is Iterable
    def __iter__(self) -> Iterator[Node]: ...

class TextElement(Element):
    child_text_separator: str = ...
    def __init__(self, rawsource: str = ..., text: str = ..., *children: Node, **attributes: Any) -> None: ...

class FixedTextElement(TextElement):
    def __init__(self, rawsource: str = ..., text: str = ..., *children: Node, **attributes: Any) -> None: ...

class Resolvable:
    resolved: int = ...

class BackLinkable:
    def add_backref(self, refid: str) -> None: ...

class Root: ...
class Titular: ...
class PreBibliographic: ...
class Bibliographic: ...
class Decorative(PreBibliographic): ...
class Structural: ...
class Body: ...
class General(Body): ...
class Sequential(Body): ...
class Admonition(Body): ...
class Special(Body): ...
class Invisible(PreBibliographic): ...
class Part: ...
class Inline: ...
class Referential(Resolvable): ...

class Targetable(Resolvable):
    referenced: int = ...
    indirect_reference_name: str = ...

class Labeled: ...

class document(Root, Structural, Element):
    current_source: str = ...
    current_line: str = ...
    settings: Values = ...
    reporter: Reporter = ...
    indirect_targets: List["target"] = ...
    substitution_defs: Dict[str, "substitution_definition"] = ...
    substitution_names: Dict[str, str] = ...
    refnames: Dict[str, List[Element]] = ...
    refids: Dict[str, List[Element]] = ...
    nameids: Dict[str, str] = ...
    nametypes: Dict[str, bool] = ...
    ids: Dict[str, Element] = ...
    footnote_refs: Dict[str, List["footnote_reference"]] = ...
    citation_refs: Dict[str, List["citation_reference"]] = ...
    autofootnotes: List["footnote"] = ...
    autofootnote_refs: List["footnote_reference"] = ...
    symbol_footnotes: List["footnote"] = ...
    symbol_footnote_refs: List["footnote_reference"] = ...
    footnotes: List["footnote"] = ...
    citations: List["citation"] = ...
    autofootnote_start: int = ...
    symbol_footnote_start: int = ...
    id_start: int = ...
    parse_messages: List["system_message"] = ...
    transform_messages: List["system_message"] = ...
    transformer: Transformer = ...
    decoration: "decoration" = ...
    document: "document" = ...
    def __init__(self, settings: Values, reporter: Reporter, *args: Node, **kwargs: Any) -> None: ...
    def asdom(self, dom: Optional[Any] = ...) -> Any: ...
    def set_id(self, node: Element, msgnode: Optional[Element] = ...) -> str: ...
    def set_name_id_map(self, node: Element, id: str, msgnode: Optional[Element] = ..., explicit: Optional[bool] = ...) -> None: ...
    def set_duplicate_name_id(self, node: Element, id: str, name: str, msgnode: Element, explicit: bool) -> None: ...
    def has_name(self, name: str) -> bool: ...
    def note_implicit_target(self, target: Element, msgnode: Optional[Element] = ...) -> None: ...
    def note_explicit_target(self, target: Element, msgnode: Optional[Element] = ...) -> None: ...
    def note_refname(self, node: Element) -> None: ...
    def note_refid(self, node: Element) -> None: ...
    def note_indirect_target(self, target: "target") -> None: ...
    def note_anonymous_target(self, target: "target") -> None: ...
    def note_autofootnote(self, footnote: "footnote") -> None: ...
    def note_autofootnote_ref(self, ref: "footnote_reference") -> None: ...
    def note_symbol_footnote(self, footnote: "footnote") -> None: ...
    def note_symbol_footnote_ref(self, ref: "footnote_reference") -> None: ...
    def note_footnote(self, footnote: "footnote") -> None: ...
    def note_footnote_ref(self, ref: "footnote_reference") -> None: ...
    def note_citation(self, citation: "citation") -> None: ...
    def note_citation_ref(self, ref: "citation_reference") -> None: ...
    def note_substitution_def(self, subdef: "substitution_definition", def_name: str, msgnode: Optional[Element] = ...) -> None: ...
    def note_substitution_ref(self, subref: "substitution_reference", refname: str) -> None: ...
    def note_pending(self, pending: "pending", priority: Optional[int] = ...) -> None: ...
    def note_parse_message(self, message: "system_message") -> None: ...
    def note_transform_message(self, message: "system_message") -> None: ...
    def note_source(self, source: str, offset: int) -> None: ...
    def copy(self) -> "nodes.document": ...
    def get_decoration(self) -> "nodes.decoration": ...

class title(Titular, PreBibliographic, TextElement): ...
class subtitle(Titular, PreBibliographic, TextElement): ...
class rubric(Titular, TextElement): ...
class docinfo(Bibliographic, Element): ...
class author(Bibliographic, TextElement): ...
class authors(Bibliographic, Element): ...
class organization(Bibliographic, TextElement): ...
class address(Bibliographic, FixedTextElement): ...
class contact(Bibliographic, TextElement): ...
class version(Bibliographic, TextElement): ...
class revision(Bibliographic, TextElement): ...
class status(Bibliographic, TextElement): ...
class date(Bibliographic, TextElement): ...
class copyright(Bibliographic, TextElement): ...

class decoration(Decorative, Element):
    def get_header(self) -> "header": ...
    def get_footer(self) -> "footer": ...

class header(Decorative, Element): ...
class footer(Decorative, Element): ...
class section(Structural, Element): ...
class topic(Structural, Element): ...
class sidebar(Structural, Element): ...
class transition(Structural, Element): ...
class paragraph(General, TextElement): ...
class compound(General, Element): ...
class container(General, Element): ...
class bullet_list(Sequential, Element): ...
class enumerated_list(Sequential, Element): ...
class list_item(Part, Element): ...
class definition_list(Sequential, Element): ...
class definition_list_item(Part, Element): ...
class term(Part, TextElement): ...
class classifier(Part, TextElement): ...
class definition(Part, Element): ...
class field_list(Sequential, Element): ...
class field(Part, Element): ...
class field_name(Part, TextElement): ...
class field_body(Part, Element): ...

class option(Part, Element):
    child_text_separator: str = ...

class option_argument(Part, TextElement):
    def astext(self) -> str: ...

class option_group(Part, Element):
    child_text_separator: str = ...

class option_list(Sequential, Element): ...

class option_list_item(Part, Element):
    child_text_separator: str = ...

class option_string(Part, TextElement): ...
class description(Part, Element): ...
class literal_block(General, FixedTextElement): ...
class doctest_block(General, FixedTextElement): ...
class math_block(General, FixedTextElement): ...
class line_block(General, Element): ...

class line(Part, TextElement):
    indent: Any = ...

class block_quote(General, Element): ...
class attribution(Part, TextElement): ...
class attention(Admonition, Element): ...
class caution(Admonition, Element): ...
class danger(Admonition, Element): ...
class error(Admonition, Element): ...
class important(Admonition, Element): ...
class note(Admonition, Element): ...
class tip(Admonition, Element): ...
class hint(Admonition, Element): ...
class warning(Admonition, Element): ...
class admonition(Admonition, Element): ...
class comment(Special, Invisible, FixedTextElement): ...
class substitution_definition(Special, Invisible, TextElement): ...
class target(Special, Invisible, Inline, TextElement, Targetable): ...
class footnote(General, BackLinkable, Element, Labeled, Targetable): ...
class citation(General, BackLinkable, Element, Labeled, Targetable): ...
class label(Part, TextElement): ...
class figure(General, Element): ...
class caption(Part, TextElement): ...
class legend(Part, Element): ...
class table(General, Element): ...
class tgroup(Part, Element): ...
class colspec(Part, Element): ...
class thead(Part, Element): ...
class tbody(Part, Element): ...
class row(Part, Element): ...
class entry(Part, Element): ...

class system_message(Special, BackLinkable, PreBibliographic, Element):
    def __init__(self, message: Optional[str] = ..., *children: Node, **attributes: Any) -> None: ...
    def astext(self) -> str: ...

class pending(Special, Invisible, Element):
    transform: Transform = ...
    details: Dict = ...
    def __init__(self, transform: Transform, details: Optional[Dict] = ..., rawsource: str = ..., *children: Node, **attributes: Any) -> None: ...
    def pformat(self, indent: str = ..., level: int = ...) -> str: ...
    def copy(self: N) -> N: ...

class raw(Special, Inline, PreBibliographic, FixedTextElement): ...
class emphasis(Inline, TextElement): ...
class strong(Inline, TextElement): ...
class literal(Inline, TextElement): ...
class reference(General, Inline, Referential, TextElement): ...
class footnote_reference(Inline, Referential, TextElement): ...
class citation_reference(Inline, Referential, TextElement): ...
class substitution_reference(Inline, TextElement): ...
class title_reference(Inline, TextElement): ...
class abbreviation(Inline, TextElement): ...
class acronym(Inline, TextElement): ...
class superscript(Inline, TextElement): ...
class subscript(Inline, TextElement): ...
class math(Inline, TextElement): ...

class image(General, Inline, Element):
    def astext(self) -> str: ...

class inline(Inline, TextElement): ...
class problematic(Inline, TextElement): ...
class generated(Inline, TextElement): ...

node_class_names: List[str] = ...

class NodeVisitor:
    optional: Tuple[str, ...] = ...
    document: document = ...
    def __init__(self, document: nodes.document) -> None: ...
    def dispatch_visit(self, node: Node) -> Any: ...
    def dispatch_departure(self, node: Node) -> Any: ...
    def unknown_visit(self, node: Node) -> Any: ...
    def unknown_departure(self, node: Node) -> Any: ...

class SparseNodeVisitor(NodeVisitor):
    def visit_Text(self, node: Text) -> None: ...
    def depart_Text(self, node: Text) -> None: ...
    def visit_abbreviation(self, node: abbreviation) -> None: ...
    def depart_abbreviation(self, node: abbreviation) -> None: ...
    def visit_acronym(self, node: acronym) -> None: ...
    def depart_acronym(self, node: acronym) -> None: ...
    def visit_address(self, node: address) -> None: ...
    def depart_address(self, node: address) -> None: ...
    def visit_admonition(self, node: admonition) -> None: ...
    def depart_admonition(self, node: admonition) -> None: ...
    def visit_attention(self, node: attention) -> None: ...
    def depart_attention(self, node: attention) -> None: ...
    def visit_attribution(self, node: attribution) -> None: ...
    def depart_attribution(self, node: attribution) -> None: ...
    def visit_author(self, node: author) -> None: ...
    def depart_author(self, node: author) -> None: ...
    def visit_authors(self, node: authors) -> None: ...
    def depart_authors(self, node: authors) -> None: ...
    def visit_block_quote(self, node: block_quote) -> None: ...
    def depart_block_quote(self, node: block_quote) -> None: ...
    def visit_bullet_list(self, node: bullet_list) -> None: ...
    def depart_bullet_list(self, node: bullet_list) -> None: ...
    def visit_caption(self, node: caption) -> None: ...
    def depart_caption(self, node: caption) -> None: ...
    def visit_caution(self, node: caution) -> None: ...
    def depart_caution(self, node: caution) -> None: ...
    def visit_citation(self, node: citation) -> None: ...
    def depart_citation(self, node: citation) -> None: ...
    def visit_citation_reference(self, node: citation_reference) -> None: ...
    def depart_citation_reference(self, node: citation_reference) -> None: ...
    def visit_classifier(self, node: classifier) -> None: ...
    def depart_classifier(self, node: classifier) -> None: ...
    def visit_colspec(self, node: colspec) -> None: ...
    def depart_colspec(self, node: colspec) -> None: ...
    def visit_comment(self, node: comment) -> None: ...
    def depart_comment(self, node: comment) -> None: ...
    def visit_compound(self, node: compound) -> None: ...
    def depart_compound(self, node: compound) -> None: ...
    def visit_contact(self, node: contact) -> None: ...
    def depart_contact(self, node: contact) -> None: ...
    def visit_container(self, node: container) -> None: ...
    def depart_container(self, node: container) -> None: ...
    def visit_copyright(self, node: copyright) -> None: ...
    def depart_copyright(self, node: copyright) -> None: ...
    def visit_danger(self, node: danger) -> None: ...
    def depart_danger(self, node: danger) -> None: ...
    def visit_date(self, node: date) -> None: ...
    def depart_date(self, node: date) -> None: ...
    def visit_decoration(self, node: decoration) -> None: ...
    def depart_decoration(self, node: decoration) -> None: ...
    def visit_definition(self, node: definition) -> None: ...
    def depart_definition(self, node: definition) -> None: ...
    def visit_definition_list(self, node: definition_list) -> None: ...
    def depart_definition_list(self, node: definition_list) -> None: ...
    def visit_definition_list_item(self, node: definition_list_item) -> None: ...
    def depart_definition_list_item(self, node: definition_list_item) -> None: ...
    def visit_description(self, node: description) -> None: ...
    def depart_description(self, node: description) -> None: ...
    def visit_docinfo(self, node: docinfo) -> None: ...
    def depart_docinfo(self, node: docinfo) -> None: ...
    def visit_doctest_block(self, node: doctest_block) -> None: ...
    def depart_doctest_block(self, node: doctest_block) -> None: ...
    def visit_document(self, node: document) -> None: ...
    def depart_document(self, node: document) -> None: ...
    def visit_emphasis(self, node: emphasis) -> None: ...
    def depart_emphasis(self, node: emphasis) -> None: ...
    def visit_entry(self, node: entry) -> None: ...
    def depart_entry(self, node: entry) -> None: ...
    def visit_enumerated_list(self, node: enumerated_list) -> None: ...
    def depart_enumerated_list(self, node: enumerated_list) -> None: ...
    def visit_error(self, node: error) -> None: ...
    def depart_error(self, node: error) -> None: ...
    def visit_field(self, node: field) -> None: ...
    def depart_field(self, node: field) -> None: ...
    def visit_field_body(self, node: field_body) -> None: ...
    def depart_field_body(self, node: field_body) -> None: ...
    def visit_field_list(self, node: field_list) -> None: ...
    def depart_field_list(self, node: field_list) -> None: ...
    def visit_field_name(self, node: field_name) -> None: ...
    def depart_field_name(self, node: field_name) -> None: ...
    def visit_figure(self, node: figure) -> None: ...
    def depart_figure(self, node: figure) -> None: ...
    def visit_footer(self, node: footer) -> None: ...
    def depart_footer(self, node: footer) -> None: ...
    def visit_footnote(self, node: footnote) -> None: ...
    def depart_footnote(self, node: footnote) -> None: ...
    def visit_footnote_reference(self, node: footnote_reference) -> None: ...
    def depart_footnote_reference(self, node: footnote_reference) -> None: ...
    def visit_generated(self, node: generated) -> None: ...
    def depart_generated(self, node: generated) -> None: ...
    def visit_header(self, node: header) -> None: ...
    def depart_header(self, node: header) -> None: ...
    def visit_hint(self, node: hint) -> None: ...
    def depart_hint(self, node: hint) -> None: ...
    def visit_image(self, node: image) -> None: ...
    def depart_image(self, node: image) -> None: ...
    def visit_important(self, node: important) -> None: ...
    def depart_important(self, node: important) -> None: ...
    def visit_inline(self, node: inline) -> None: ...
    def depart_inline(self, node: inline) -> None: ...
    def visit_label(self, node: label) -> None: ...
    def depart_label(self, node: label) -> None: ...
    def visit_legend(self, node: legend) -> None: ...
    def depart_legend(self, node: legend) -> None: ...
    def visit_line(self, node: line) -> None: ...
    def depart_line(self, node: line) -> None: ...
    def visit_line_block(self, node: line_block) -> None: ...
    def depart_line_block(self, node: line_block) -> None: ...
    def visit_list_item(self, node: list_item) -> None: ...
    def depart_list_item(self, node: list_item) -> None: ...
    def visit_literal(self, node: literal) -> None: ...
    def depart_literal(self, node: literal) -> None: ...
    def visit_literal_block(self, node: literal_block) -> None: ...
    def depart_literal_block(self, node: literal_block) -> None: ...
    def visit_math(self, node: math) -> None: ...
    def depart_math(self, node: math) -> None: ...
    def visit_math_block(self, node: math_block) -> None: ...
    def depart_math_block(self, node: math_block) -> None: ...
    def visit_note(self, node: note) -> None: ...
    def depart_note(self, node: note) -> None: ...
    def visit_option(self, node: option) -> None: ...
    def depart_option(self, node: option) -> None: ...
    def visit_option_argument(self, node: option_argument) -> None: ...
    def depart_option_argument(self, node: option_argument) -> None: ...
    def visit_option_group(self, node: option_group) -> None: ...
    def depart_option_group(self, node: option_group) -> None: ...
    def visit_option_list(self, node: option_list) -> None: ...
    def depart_option_list(self, node: option_list) -> None: ...
    def visit_option_list_item(self, node: option_list_item) -> None: ...
    def depart_option_list_item(self, node: option_list_item) -> None: ...
    def visit_option_string(self, node: option_string) -> None: ...
    def depart_option_string(self, node: option_string) -> None: ...
    def visit_organization(self, node: organization) -> None: ...
    def depart_organization(self, node: organization) -> None: ...
    def visit_paragraph(self, node: paragraph) -> None: ...
    def depart_paragraph(self, node: paragraph) -> None: ...
    def visit_pending(self, node: pending) -> None: ...
    def depart_pending(self, node: pending) -> None: ...
    def visit_problematic(self, node: problematic) -> None: ...
    def depart_problematic(self, node: problematic) -> None: ...
    def visit_raw(self, node: raw) -> None: ...
    def depart_raw(self, node: raw) -> None: ...
    def visit_reference(self, node: reference) -> None: ...
    def depart_reference(self, node: reference) -> None: ...
    def visit_revision(self, node: revision) -> None: ...
    def depart_revision(self, node: revision) -> None: ...
    def visit_row(self, node: row) -> None: ...
    def depart_row(self, node: row) -> None: ...
    def visit_rubric(self, node: rubric) -> None: ...
    def depart_rubric(self, node: rubric) -> None: ...
    def visit_section(self, node: section) -> None: ...
    def depart_section(self, node: section) -> None: ...
    def visit_sidebar(self, node: sidebar) -> None: ...
    def depart_sidebar(self, node: sidebar) -> None: ...
    def visit_status(self, node: status) -> None: ...
    def depart_status(self, node: status) -> None: ...
    def visit_strong(self, node: strong) -> None: ...
    def depart_strong(self, node: strong) -> None: ...
    def visit_subscript(self, node: subscript) -> None: ...
    def depart_subscript(self, node: subscript) -> None: ...
    def visit_substitution_definition(self, node: substitution_definition) -> None: ...
    def depart_substitution_definition(self, node: substitution_definition) -> None: ...
    def visit_substitution_reference(self, node: substitution_reference) -> None: ...
    def depart_substitution_reference(self, node: substitution_reference) -> None: ...
    def visit_subtitle(self, node: subtitle) -> None: ...
    def depart_subtitle(self, node: subtitle) -> None: ...
    def visit_superscript(self, node: superscript) -> None: ...
    def depart_superscript(self, node: superscript) -> None: ...
    def visit_system_message(self, node: system_message) -> None: ...
    def depart_system_message(self, node: system_message) -> None: ...
    def visit_table(self, node: table) -> None: ...
    def depart_table(self, node: table) -> None: ...
    def visit_target(self, node: target) -> None: ...
    def depart_target(self, node: target) -> None: ...
    def visit_tbody(self, node: tbody) -> None: ...
    def depart_tbody(self, node: tbody) -> None: ...
    def visit_term(self, node: term) -> None: ...
    def depart_term(self, node: term) -> None: ...
    def visit_tgroup(self, node: tgroup) -> None: ...
    def depart_tgroup(self, node: tgroup) -> None: ...
    def visit_thead(self, node: thead) -> None: ...
    def depart_thead(self, node: thead) -> None: ...
    def visit_tip(self, node: tip) -> None: ...
    def depart_tip(self, node: tip) -> None: ...
    def visit_title(self, node: title) -> None: ...
    def depart_title(self, node: title) -> None: ...
    def visit_title_reference(self, node: title_reference) -> None: ...
    def depart_title_reference(self, node: title_reference) -> None: ...
    def visit_topic(self, node: topic) -> None: ...
    def depart_topic(self, node: topic) -> None: ...
    def visit_transition(self, node: transition) -> None: ...
    def depart_transition(self, node: transition) -> None: ...
    def visit_version(self, node: version) -> None: ...
    def depart_version(self, node: version) -> None: ...
    def visit_warning(self, node: warning) -> None: ...
    def depart_warning(self, node: warning) -> None: ...

class GenericNodeVisitor(NodeVisitor):
    def default_visit(self, node: Node) -> Any: ...
    def default_departure(self, node: Node) -> Any: ...
    def visit_Text(self, node: Text) -> None: ...
    def depart_Text(self, node: Text) -> None: ...
    def visit_abbreviation(self, node: abbreviation) -> None: ...
    def depart_abbreviation(self, node: abbreviation) -> None: ...
    def visit_acronym(self, node: acronym) -> None: ...
    def depart_acronym(self, node: acronym) -> None: ...
    def visit_address(self, node: address) -> None: ...
    def depart_address(self, node: address) -> None: ...
    def visit_admonition(self, node: admonition) -> None: ...
    def depart_admonition(self, node: admonition) -> None: ...
    def visit_attention(self, node: attention) -> None: ...
    def depart_attention(self, node: attention) -> None: ...
    def visit_attribution(self, node: attribution) -> None: ...
    def depart_attribution(self, node: attribution) -> None: ...
    def visit_author(self, node: author) -> None: ...
    def depart_author(self, node: author) -> None: ...
    def visit_authors(self, node: authors) -> None: ...
    def depart_authors(self, node: authors) -> None: ...
    def visit_block_quote(self, node: block_quote) -> None: ...
    def depart_block_quote(self, node: block_quote) -> None: ...
    def visit_bullet_list(self, node: bullet_list) -> None: ...
    def depart_bullet_list(self, node: bullet_list) -> None: ...
    def visit_caption(self, node: caption) -> None: ...
    def depart_caption(self, node: caption) -> None: ...
    def visit_caution(self, node: caution) -> None: ...
    def depart_caution(self, node: caution) -> None: ...
    def visit_citation(self, node: citation) -> None: ...
    def depart_citation(self, node: citation) -> None: ...
    def visit_citation_reference(self, node: citation_reference) -> None: ...
    def depart_citation_reference(self, node: citation_reference) -> None: ...
    def visit_classifier(self, node: classifier) -> None: ...
    def depart_classifier(self, node: classifier) -> None: ...
    def visit_colspec(self, node: colspec) -> None: ...
    def depart_colspec(self, node: colspec) -> None: ...
    def visit_comment(self, node: comment) -> None: ...
    def depart_comment(self, node: comment) -> None: ...
    def visit_compound(self, node: compound) -> None: ...
    def depart_compound(self, node: compound) -> None: ...
    def visit_contact(self, node: contact) -> None: ...
    def depart_contact(self, node: contact) -> None: ...
    def visit_container(self, node: container) -> None: ...
    def depart_container(self, node: container) -> None: ...
    def visit_copyright(self, node: copyright) -> None: ...
    def depart_copyright(self, node: copyright) -> None: ...
    def visit_danger(self, node: danger) -> None: ...
    def depart_danger(self, node: danger) -> None: ...
    def visit_date(self, node: date) -> None: ...
    def depart_date(self, node: date) -> None: ...
    def visit_decoration(self, node: decoration) -> None: ...
    def depart_decoration(self, node: decoration) -> None: ...
    def visit_definition(self, node: definition) -> None: ...
    def depart_definition(self, node: definition) -> None: ...
    def visit_definition_list(self, node: definition_list) -> None: ...
    def depart_definition_list(self, node: definition_list) -> None: ...
    def visit_definition_list_item(self, node: definition_list_item) -> None: ...
    def depart_definition_list_item(self, node: definition_list_item) -> None: ...
    def visit_description(self, node: description) -> None: ...
    def depart_description(self, node: description) -> None: ...
    def visit_docinfo(self, node: docinfo) -> None: ...
    def depart_docinfo(self, node: docinfo) -> None: ...
    def visit_doctest_block(self, node: doctest_block) -> None: ...
    def depart_doctest_block(self, node: doctest_block) -> None: ...
    def visit_document(self, node: document) -> None: ...
    def depart_document(self, node: document) -> None: ...
    def visit_emphasis(self, node: emphasis) -> None: ...
    def depart_emphasis(self, node: emphasis) -> None: ...
    def visit_entry(self, node: entry) -> None: ...
    def depart_entry(self, node: entry) -> None: ...
    def visit_enumerated_list(self, node: enumerated_list) -> None: ...
    def depart_enumerated_list(self, node: enumerated_list) -> None: ...
    def visit_error(self, node: error) -> None: ...
    def depart_error(self, node: error) -> None: ...
    def visit_field(self, node: field) -> None: ...
    def depart_field(self, node: field) -> None: ...
    def visit_field_body(self, node: field_body) -> None: ...
    def depart_field_body(self, node: field_body) -> None: ...
    def visit_field_list(self, node: field_list) -> None: ...
    def depart_field_list(self, node: field_list) -> None: ...
    def visit_field_name(self, node: field_name) -> None: ...
    def depart_field_name(self, node: field_name) -> None: ...
    def visit_figure(self, node: figure) -> None: ...
    def depart_figure(self, node: figure) -> None: ...
    def visit_footer(self, node: footer) -> None: ...
    def depart_footer(self, node: footer) -> None: ...
    def visit_footnote(self, node: footnote) -> None: ...
    def depart_footnote(self, node: footnote) -> None: ...
    def visit_footnote_reference(self, node: footnote_reference) -> None: ...
    def depart_footnote_reference(self, node: footnote_reference) -> None: ...
    def visit_generated(self, node: generated) -> None: ...
    def depart_generated(self, node: generated) -> None: ...
    def visit_header(self, node: header) -> None: ...
    def depart_header(self, node: header) -> None: ...
    def visit_hint(self, node: hint) -> None: ...
    def depart_hint(self, node: hint) -> None: ...
    def visit_image(self, node: image) -> None: ...
    def depart_image(self, node: image) -> None: ...
    def visit_important(self, node: important) -> None: ...
    def depart_important(self, node: important) -> None: ...
    def visit_inline(self, node: inline) -> None: ...
    def depart_inline(self, node: inline) -> None: ...
    def visit_label(self, node: label) -> None: ...
    def depart_label(self, node: label) -> None: ...
    def visit_legend(self, node: legend) -> None: ...
    def depart_legend(self, node: legend) -> None: ...
    def visit_line(self, node: line) -> None: ...
    def depart_line(self, node: line) -> None: ...
    def visit_line_block(self, node: line_block) -> None: ...
    def depart_line_block(self, node: line_block) -> None: ...
    def visit_list_item(self, node: list_item) -> None: ...
    def depart_list_item(self, node: list_item) -> None: ...
    def visit_literal(self, node: literal) -> None: ...
    def depart_literal(self, node: literal) -> None: ...
    def visit_literal_block(self, node: literal_block) -> None: ...
    def depart_literal_block(self, node: literal_block) -> None: ...
    def visit_math(self, node: math) -> None: ...
    def depart_math(self, node: math) -> None: ...
    def visit_math_block(self, node: math_block) -> None: ...
    def depart_math_block(self, node: math_block) -> None: ...
    def visit_note(self, node: note) -> None: ...
    def depart_note(self, node: note) -> None: ...
    def visit_option(self, node: option) -> None: ...
    def depart_option(self, node: option) -> None: ...
    def visit_option_argument(self, node: option_argument) -> None: ...
    def depart_option_argument(self, node: option_argument) -> None: ...
    def visit_option_group(self, node: option_group) -> None: ...
    def depart_option_group(self, node: option_group) -> None: ...
    def visit_option_list(self, node: option_list) -> None: ...
    def depart_option_list(self, node: option_list) -> None: ...
    def visit_option_list_item(self, node: option_list_item) -> None: ...
    def depart_option_list_item(self, node: option_list_item) -> None: ...
    def visit_option_string(self, node: option_string) -> None: ...
    def depart_option_string(self, node: option_string) -> None: ...
    def visit_organization(self, node: organization) -> None: ...
    def depart_organization(self, node: organization) -> None: ...
    def visit_paragraph(self, node: paragraph) -> None: ...
    def depart_paragraph(self, node: paragraph) -> None: ...
    def visit_pending(self, node: pending) -> None: ...
    def depart_pending(self, node: pending) -> None: ...
    def visit_problematic(self, node: problematic) -> None: ...
    def depart_problematic(self, node: problematic) -> None: ...
    def visit_raw(self, node: raw) -> None: ...
    def depart_raw(self, node: raw) -> None: ...
    def visit_reference(self, node: reference) -> None: ...
    def depart_reference(self, node: reference) -> None: ...
    def visit_revision(self, node: revision) -> None: ...
    def depart_revision(self, node: revision) -> None: ...
    def visit_row(self, node: row) -> None: ...
    def depart_row(self, node: row) -> None: ...
    def visit_rubric(self, node: rubric) -> None: ...
    def depart_rubric(self, node: rubric) -> None: ...
    def visit_section(self, node: section) -> None: ...
    def depart_section(self, node: section) -> None: ...
    def visit_sidebar(self, node: sidebar) -> None: ...
    def depart_sidebar(self, node: sidebar) -> None: ...
    def visit_status(self, node: status) -> None: ...
    def depart_status(self, node: status) -> None: ...
    def visit_strong(self, node: strong) -> None: ...
    def depart_strong(self, node: strong) -> None: ...
    def visit_subscript(self, node: subscript) -> None: ...
    def depart_subscript(self, node: subscript) -> None: ...
    def visit_substitution_definition(self, node: substitution_definition) -> None: ...
    def depart_substitution_definition(self, node: substitution_definition) -> None: ...
    def visit_substitution_reference(self, node: substitution_reference) -> None: ...
    def depart_substitution_reference(self, node: substitution_reference) -> None: ...
    def visit_subtitle(self, node: subtitle) -> None: ...
    def depart_subtitle(self, node: subtitle) -> None: ...
    def visit_superscript(self, node: superscript) -> None: ...
    def depart_superscript(self, node: superscript) -> None: ...
    def visit_system_message(self, node: system_message) -> None: ...
    def depart_system_message(self, node: system_message) -> None: ...
    def visit_table(self, node: table) -> None: ...
    def depart_table(self, node: table) -> None: ...
    def visit_target(self, node: target) -> None: ...
    def depart_target(self, node: target) -> None: ...
    def visit_tbody(self, node: tbody) -> None: ...
    def depart_tbody(self, node: tbody) -> None: ...
    def visit_term(self, node: term) -> None: ...
    def depart_term(self, node: term) -> None: ...
    def visit_tgroup(self, node: tgroup) -> None: ...
    def depart_tgroup(self, node: tgroup) -> None: ...
    def visit_thead(self, node: thead) -> None: ...
    def depart_thead(self, node: thead) -> None: ...
    def visit_tip(self, node: tip) -> None: ...
    def depart_tip(self, node: tip) -> None: ...
    def visit_title(self, node: title) -> None: ...
    def depart_title(self, node: title) -> None: ...
    def visit_title_reference(self, node: title_reference) -> None: ...
    def depart_title_reference(self, node: title_reference) -> None: ...
    def visit_topic(self, node: topic) -> None: ...
    def depart_topic(self, node: topic) -> None: ...
    def visit_transition(self, node: transition) -> None: ...
    def depart_transition(self, node: transition) -> None: ...
    def visit_version(self, node: version) -> None: ...
    def depart_version(self, node: version) -> None: ...
    def visit_warning(self, node: warning) -> None: ...
    def depart_warning(self, node: warning) -> None: ...

class TreeCopyVisitor(GenericNodeVisitor):
    parent_stack: List[Node] = ...
    parent: List[Node] = ...
    def __init__(self, document: document) -> None: ...
    def get_tree_copy(self) -> Node: ...
    def default_visit(self, node: Node) -> None: ...
    def default_departure(self, node: Node) -> None: ...

class TreePruningException(Exception): ...
class SkipChildren(TreePruningException): ...
class SkipSiblings(TreePruningException): ...
class SkipNode(TreePruningException): ...
class SkipDeparture(TreePruningException): ...
class NodeFound(TreePruningException): ...
class StopTraversal(TreePruningException): ...

def make_id(string: str) -> str: ...
def dupname(node: Element, name: str) -> None: ...
def fully_normalize_name(name: str) -> str: ...
def whitespace_normalize_name(name: str) -> str: ...
def serial_escape(value: str) -> str: ...
def pseudo_quoteattr(value: str) -> str: ...
